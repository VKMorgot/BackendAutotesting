{
	"info": {
		"_postman_id": "b1ecb3e5-fcc8-4902-98c3-e9256efbc0fe",
		"name": "spoonacular API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28533530"
	},
	"item": [
		{
			"name": "complexSearch",
			"item": [
				{
					"name": "IndianCuisine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check indian food\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalResults).to.eql(122);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlComplexSearch}}?cuisine=Indian",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "cuisine",
									"value": "Indian"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalResults).to.eql(1763);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlComplexSearch}}?type=main course",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "type",
									"value": "main course"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check author\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalResults).to.eql(166);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlComplexSearch}}?author=coffeebean",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "author",
									"value": "coffeebean"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "RecipeBox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check recipe box\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalResults).to.eql(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlComplexSearch}}?recipeBoxId=2468",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "recipeBoxId",
									"value": "2468"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check title\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (let i = 0; i < jsonData.results.length; i++) {\r",
									"        var title = jsonData.results[i].title;\r",
									"        var titleMatch = pm.collectionVariables.get(\"titleMatch\");\r",
									"        console.log(title);\r",
									"        console.log(titleMatch);\r",
									"        pm.expect(title).to.include(titleMatch);        \r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlComplexSearch}}?titleMatch={{titleMatch}}",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "titleMatch",
									"value": "{{titleMatch}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"numberValue\", 1 + Math.floor(Math.random() * 100));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check correct number\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.number).to.eql(parseInt(pm.collectionVariables.get(\"numberValue\")));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?number={{numberValue}}",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "number",
									"value": "{{numberValue}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Offset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"offsetValue\", Math.floor(Math.random() * 901));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check correct offset\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.offset).to.eql(parseInt(pm.collectionVariables.get(\"offsetValue\")));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?offset={{offsetValue}}",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{offsetValue}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ChickenTitle",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check title\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.results[0].title).to.include(\"Chicken\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?titleMatch=Chicken",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "titleMatch",
									"value": "Chicken"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BurgerQuery",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check query\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalResults).to.eql(54);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?query=burger",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "query",
									"value": "burger"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "maxProtein",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"proteinValue\", 1 + Math.floor(Math.random() * 50));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check Protein amount\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (let i = 0; i < jsonData.results.length; i++) {\r",
									"        var proteinAmount = jsonData.results[i].nutrition.nutrients[0].amount;\r",
									"        var proteinValue = parseInt(pm.collectionVariables.get(\"proteinValue\"))\r",
									"        if (proteinAmount > proteinValue) {\r",
									"            console.log(proteinAmount + \" in \" + i + \" result is more then \" + proteinValue)\r",
									"        } else {\r",
									"            console.log(proteinAmount + \" in \" + i + \" result\")\r",
									"        }\r",
									"        pm.expect(proteinAmount).to.lessThan(proteinValue);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?maxProtein={{proteinValue}}",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "maxProtein",
									"value": "{{proteinValue}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "maxFat",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"fatValue\", Math.floor(Math.random() * 50));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check fat amount\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (let i = 0; i < jsonData.results.length; i++) {\r",
									"        var fatAmount = jsonData.results[i].nutrition.nutrients[0].amount;\r",
									"        var fatValue = parseInt(pm.collectionVariables.get(\"fatValue\"))\r",
									"        if (fatAmount > fatValue) {\r",
									"            console.log(fatAmount + \" in \" + i + \" result is more then \" + fatValue)\r",
									"        } else {\r",
									"            console.log(fatAmount + \" in \" + i + \" result\")\r",
									"        }\r",
									"        pm.expect(fatAmount).to.lessThan(fatValue);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?maxFat={{fatValue}}",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "maxFat",
									"value": "{{fatValue}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "minCaffeine",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"caffeineValue\", Math.floor(Math.random() * 50));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check caffeine amount\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (let i = 0; i < jsonData.results.length; i++) {\r",
									"        var caffeineAmount = jsonData.results[i].nutrition.nutrients[0].amount;\r",
									"        var caffeineValue = parseInt(pm.collectionVariables.get(\"caffeineValue\"))\r",
									"        if (caffeineAmount < caffeineValue) {\r",
									"            console.log(caffeineAmount + \" in \" + i + \" result is less then \" + caffeineValue)\r",
									"        } else {\r",
									"            console.log(caffeineAmount + \" in \" + i + \" result\")\r",
									"        }\r",
									"        pm.expect(caffeineAmount).to.greaterThan(caffeineValue);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?minCaffeine={{caffeineValue}}",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "minCaffeine",
									"value": "{{caffeineValue}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "minAlcohol",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"alcoholValue\", Math.floor(Math.random() * 30));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check alcohol amount\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (let i = 0; i < jsonData.results.length; i++) {\r",
									"        var alcoholAmount = jsonData.results[i].nutrition.nutrients[0].amount;\r",
									"        var alcoholValue = parseInt(pm.collectionVariables.get(\"alcoholValue\"))\r",
									"        if (alcoholAmount < alcoholValue) {\r",
									"            console.log(alcoholAmount + \" in \" + i + \" result is less then \" + alcoholValue)\r",
									"        } else {\r",
									"            console.log(alcoholAmount + \" in \" + i + \" result\")\r",
									"        }\r",
									"        pm.expect(alcoholAmount).to.greaterThan(alcoholValue);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?minAlcohol={{alcoholValue}}",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "minAlcohol",
									"value": "{{alcoholValue}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "maxReadyTime",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check ready time\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (let i = 0; i < jsonData.results.length; i++) {\r",
									"        var readyTime = jsonData.results[i].readyInMinutes;\r",
									"        var maxReadyTime = parseInt(pm.collectionVariables.get(\"readyTime\")) + 1;\r",
									"        if (readyTime > maxReadyTime) {\r",
									"            console.log(readyTime + \" in \" + i + \" result is more then \" + maxReadyTime)\r",
									"        } else {\r",
									"            console.log(readyTime + \" in \" + i + \" result\")\r",
									"        }\r",
									"        pm.expect(readyTime).to.lessThan(maxReadyTime);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?maxReadyTime={{readyTime}}&addRecipeInformation=true",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "maxReadyTime",
									"value": "{{readyTime}}"
								},
								{
									"key": "addRecipeInformation",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VegetarianDiet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check vegetarian dishes\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (let i = 0; i < jsonData.results.length; i++) {\r",
									"        var isVegetarian = jsonData.results[i].vegetarian;\r",
									"        if (! isVegetarian) {\r",
									"            console.log (\"Not vegetarian food in result: \" + i);\r",
									"            pm.expect(isVegetarian).to.true;\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?addRecipeInformation=true&diet=vegetarian",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "addRecipeInformation",
									"value": "true"
								},
								{
									"key": "diet",
									"value": "vegetarian"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ingredients",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check ingredients\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (let i = 0; i < jsonData.results.length; i++) {\r",
									"        var isTomato = jsonData.results[i].usedIngredients[0].originalName;\r",
									"        console.log(i)\r",
									"        console.log(isTomato)\r",
									"        pm.expect(isTomato).to.include(\"tomato\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?includeIngredients=tomato&fillIngredients=true",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "addRecipeInformation",
									"value": "true",
									"disabled": true
								},
								{
									"key": "includeIngredients",
									"value": "tomato"
								},
								{
									"key": "fillIngredients",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "minCalories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"caloriesValues\", 50 + Math.floor(Math.random() * 50));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check Calories amount\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (let i = 0; i < jsonData.results.length; i++) {\r",
									"        var caloriesAmount = jsonData.results[i].nutrition.nutrients[0].amount;\r",
									"        var caloriesValue = parseInt(pm.collectionVariables.get(\"caloriesValues\"))\r",
									"        if (caloriesAmount < caloriesValue) {\r",
									"            console.log(caloriesAmount + \" in \" + i + \" result is more then \" + caloriesValue)\r",
									"        } else {\r",
									"            console.log(caloriesAmount + \" in \" + i + \" result\")\r",
									"        }\r",
									"        pm.expect(caloriesAmount).to.greaterThan(caloriesValue);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?minCalories={{caloriesValues}}",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "minCalories",
									"value": "{{caloriesValues}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NoParams",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check query\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalResults).to.eql(5222);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}",
							"host": [
								"{{baseUrlComplexSearch}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UnknownParam",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Work with unknown params\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.results.length).to.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?unknownParam=someUnknownParam",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "unknownParam",
									"value": "someUnknownParam"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AllParams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check query\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalResults).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlComplexSearch}}?query=burger&cuisine=italian&excludeCuisine=greek&diet=vegetarian&intolerances=gluten&equipment=pan&includeIngredients=tomato,cheese&excludeIngredients=eggs&type=main course&instructionsRequired=true&fillIngredients=false&addRecipeInformation=false&addRecipeNutrition=false&author=coffeebean&tags=ipsum ea proident amet occaecat&recipeBoxId=2468&titleMatch=Crock Pot&maxReadyTime=20&ignorePantry=false&sort=calories&sortDirection=asc&minCarbs=10&maxCarbs=100&minProtein=10&maxProtein=100&minCalories=50&maxCalories=800&minFat=1&maxFat=100&minAlcohol=0&maxAlcohol=100&minCaffeine=0&maxCaffeine=100&minCopper=0&maxCopper=100&minCalcium=0&maxCalcium=100&minCholine=0&maxCholine=100&minCholesterol=0&maxCholesterol=100&minFluoride=0&maxFluoride=100&minSaturatedFat=0&maxSaturatedFat=100&minVitaminA=0&maxVitaminA=100&minVitaminC=0&maxVitaminC=100&minVitaminD=0&maxVitaminD=100&minVitaminE=0&maxVitaminE=100&minVitaminK=0&maxVitaminK=100&minVitaminB1=0&maxVitaminB1=100&minVitaminB2=0&maxVitaminB2=100&minVitaminB5=0&maxVitaminB5=100&minVitaminB3=0&maxVitaminB3=100&minVitaminB6=0&maxVitaminB6=100&minVitaminB12=0&maxVitaminB12=100&minFiber=0&maxFiber=100&minFolate=0&maxFolate=100&minFolicAcid=0&maxFolicAcid=100&minIodine=0&maxIodine=100&minIron=0&maxIron=100&minMagnesium=0&maxMagnesium=100&minManganese=0&maxManganese=100&minPhosphorus=0&maxPhosphorus=100&minPotassium=0&maxPotassium=100&minSelenium=0&maxSelenium=100&minSodium=0&maxSodium=100&minSugar=0&maxSugar=100&minZinc=0&maxZinc=100&offset=606&number=10&limitLicense=true",
							"host": [
								"{{baseUrlComplexSearch}}"
							],
							"query": [
								{
									"key": "query",
									"value": "burger",
									"description": "The (natural language) search query."
								},
								{
									"key": "cuisine",
									"value": "italian",
									"description": "The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines."
								},
								{
									"key": "excludeCuisine",
									"value": "greek",
									"description": "The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines."
								},
								{
									"key": "diet",
									"value": "vegetarian",
									"description": "The diet for which the recipes must be suitable. See a full list of supported diets."
								},
								{
									"key": "intolerances",
									"value": "gluten",
									"description": "A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances."
								},
								{
									"key": "equipment",
									"value": "pan",
									"description": "The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\"."
								},
								{
									"key": "includeIngredients",
									"value": "tomato,cheese",
									"description": "A comma-separated list of ingredients that should/must be used in the recipes."
								},
								{
									"key": "excludeIngredients",
									"value": "eggs",
									"description": "A comma-separated list of ingredients or ingredient types that the recipes must not contain."
								},
								{
									"key": "type",
									"value": "main course",
									"description": "The type of recipe. See a full list of supported meal types."
								},
								{
									"key": "instructionsRequired",
									"value": "true",
									"description": "Whether the recipes must have instructions."
								},
								{
									"key": "fillIngredients",
									"value": "false",
									"description": "Add information about the ingredients and whether they are used or missing in relation to the query."
								},
								{
									"key": "addRecipeInformation",
									"value": "false",
									"description": "If set to true, you get more information about the recipes returned."
								},
								{
									"key": "addRecipeNutrition",
									"value": "false",
									"description": "If set to true, you get nutritional information about each recipes returned."
								},
								{
									"key": "author",
									"value": "coffeebean",
									"description": "The username of the recipe author."
								},
								{
									"key": "tags",
									"value": "ipsum ea proident amet occaecat",
									"description": "The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have."
								},
								{
									"key": "recipeBoxId",
									"value": "2468",
									"description": "The id of the recipe box to which the search should be limited to."
								},
								{
									"key": "titleMatch",
									"value": "Crock Pot",
									"description": "Enter text that must be found in the title of the recipes."
								},
								{
									"key": "maxReadyTime",
									"value": "20",
									"description": "The maximum time in minutes it should take to prepare and cook the recipe."
								},
								{
									"key": "ignorePantry",
									"value": "false",
									"description": "Whether to ignore typical pantry items, such as water, salt, flour, etc."
								},
								{
									"key": "sort",
									"value": "calories",
									"description": "The strategy to sort recipes by. See a full list of supported sorting options."
								},
								{
									"key": "sortDirection",
									"value": "asc",
									"description": "The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending)."
								},
								{
									"key": "minCarbs",
									"value": "10",
									"description": "The minimum amount of carbohydrates in grams the recipe must have."
								},
								{
									"key": "maxCarbs",
									"value": "100",
									"description": "The maximum amount of carbohydrates in grams the recipe can have."
								},
								{
									"key": "minProtein",
									"value": "10",
									"description": "The minimum amount of protein in grams the recipe must have."
								},
								{
									"key": "maxProtein",
									"value": "100",
									"description": "The maximum amount of protein in grams the recipe can have."
								},
								{
									"key": "minCalories",
									"value": "50",
									"description": "The minimum amount of calories the recipe must have."
								},
								{
									"key": "maxCalories",
									"value": "800",
									"description": "The maximum amount of calories the recipe can have."
								},
								{
									"key": "minFat",
									"value": "1",
									"description": "The minimum amount of fat in grams the recipe must have."
								},
								{
									"key": "maxFat",
									"value": "100",
									"description": "The maximum amount of fat in grams the recipe can have."
								},
								{
									"key": "minAlcohol",
									"value": "0",
									"description": "The minimum amount of alcohol in grams the recipe must have."
								},
								{
									"key": "maxAlcohol",
									"value": "100",
									"description": "The maximum amount of alcohol in grams the recipe can have."
								},
								{
									"key": "minCaffeine",
									"value": "0",
									"description": "The minimum amount of caffeine in milligrams the recipe must have."
								},
								{
									"key": "maxCaffeine",
									"value": "100",
									"description": "The maximum amount of caffeine in milligrams the recipe can have."
								},
								{
									"key": "minCopper",
									"value": "0",
									"description": "The minimum amount of copper in milligrams the recipe must have."
								},
								{
									"key": "maxCopper",
									"value": "100",
									"description": "The maximum amount of copper in milligrams the recipe can have."
								},
								{
									"key": "minCalcium",
									"value": "0",
									"description": "The minimum amount of calcium in milligrams the recipe must have."
								},
								{
									"key": "maxCalcium",
									"value": "100",
									"description": "The maximum amount of calcium in milligrams the recipe can have."
								},
								{
									"key": "minCholine",
									"value": "0",
									"description": "The minimum amount of choline in milligrams the recipe must have."
								},
								{
									"key": "maxCholine",
									"value": "100",
									"description": "The maximum amount of choline in milligrams the recipe can have."
								},
								{
									"key": "minCholesterol",
									"value": "0",
									"description": "The minimum amount of cholesterol in milligrams the recipe must have."
								},
								{
									"key": "maxCholesterol",
									"value": "100",
									"description": "The maximum amount of cholesterol in milligrams the recipe can have."
								},
								{
									"key": "minFluoride",
									"value": "0",
									"description": "The minimum amount of fluoride in milligrams the recipe must have."
								},
								{
									"key": "maxFluoride",
									"value": "100",
									"description": "The maximum amount of fluoride in milligrams the recipe can have."
								},
								{
									"key": "minSaturatedFat",
									"value": "0",
									"description": "The minimum amount of saturated fat in grams the recipe must have."
								},
								{
									"key": "maxSaturatedFat",
									"value": "100",
									"description": "The maximum amount of saturated fat in grams the recipe can have."
								},
								{
									"key": "minVitaminA",
									"value": "0",
									"description": "The minimum amount of Vitamin A in IU the recipe must have."
								},
								{
									"key": "maxVitaminA",
									"value": "100",
									"description": "The maximum amount of Vitamin A in IU the recipe can have."
								},
								{
									"key": "minVitaminC",
									"value": "0",
									"description": "The minimum amount of Vitamin C milligrams the recipe must have."
								},
								{
									"key": "maxVitaminC",
									"value": "100",
									"description": "The maximum amount of Vitamin C in milligrams the recipe can have."
								},
								{
									"key": "minVitaminD",
									"value": "0",
									"description": "The minimum amount of Vitamin D in micrograms the recipe must have."
								},
								{
									"key": "maxVitaminD",
									"value": "100",
									"description": "The maximum amount of Vitamin D in micrograms the recipe can have."
								},
								{
									"key": "minVitaminE",
									"value": "0",
									"description": "The minimum amount of Vitamin E in milligrams the recipe must have."
								},
								{
									"key": "maxVitaminE",
									"value": "100",
									"description": "The maximum amount of Vitamin E in milligrams the recipe can have."
								},
								{
									"key": "minVitaminK",
									"value": "0",
									"description": "The minimum amount of Vitamin K in micrograms the recipe must have."
								},
								{
									"key": "maxVitaminK",
									"value": "100",
									"description": "The maximum amount of Vitamin K in micrograms the recipe can have."
								},
								{
									"key": "minVitaminB1",
									"value": "0",
									"description": "The minimum amount of Vitamin B1 in milligrams the recipe must have."
								},
								{
									"key": "maxVitaminB1",
									"value": "100",
									"description": "The maximum amount of Vitamin B1 in milligrams the recipe can have."
								},
								{
									"key": "minVitaminB2",
									"value": "0",
									"description": "The minimum amount of Vitamin B2 in milligrams the recipe must have."
								},
								{
									"key": "maxVitaminB2",
									"value": "100",
									"description": "The maximum amount of Vitamin B2 in milligrams the recipe can have."
								},
								{
									"key": "minVitaminB5",
									"value": "0",
									"description": "The minimum amount of Vitamin B5 in milligrams the recipe must have."
								},
								{
									"key": "maxVitaminB5",
									"value": "100",
									"description": "The maximum amount of Vitamin B5 in milligrams the recipe can have."
								},
								{
									"key": "minVitaminB3",
									"value": "0",
									"description": "The minimum amount of Vitamin B3 in milligrams the recipe must have."
								},
								{
									"key": "maxVitaminB3",
									"value": "100",
									"description": "The maximum amount of Vitamin B3 in milligrams the recipe can have."
								},
								{
									"key": "minVitaminB6",
									"value": "0",
									"description": "The minimum amount of Vitamin B6 in milligrams the recipe must have."
								},
								{
									"key": "maxVitaminB6",
									"value": "100",
									"description": "The maximum amount of Vitamin B6 in milligrams the recipe can have."
								},
								{
									"key": "minVitaminB12",
									"value": "0",
									"description": "The minimum amount of Vitamin B12 in micrograms the recipe must have."
								},
								{
									"key": "maxVitaminB12",
									"value": "100",
									"description": "The maximum amount of Vitamin B12 in micrograms the recipe can have."
								},
								{
									"key": "minFiber",
									"value": "0",
									"description": "The minimum amount of fiber in grams the recipe must have."
								},
								{
									"key": "maxFiber",
									"value": "100",
									"description": "The maximum amount of fiber in grams the recipe can have."
								},
								{
									"key": "minFolate",
									"value": "0",
									"description": "The minimum amount of folate in micrograms the recipe must have."
								},
								{
									"key": "maxFolate",
									"value": "100",
									"description": "The maximum amount of folate in micrograms the recipe can have."
								},
								{
									"key": "minFolicAcid",
									"value": "0",
									"description": "The minimum amount of folic acid in micrograms the recipe must have."
								},
								{
									"key": "maxFolicAcid",
									"value": "100",
									"description": "The maximum amount of folic acid in micrograms the recipe can have."
								},
								{
									"key": "minIodine",
									"value": "0",
									"description": "The minimum amount of iodine in micrograms the recipe must have."
								},
								{
									"key": "maxIodine",
									"value": "100",
									"description": "The maximum amount of iodine in micrograms the recipe can have."
								},
								{
									"key": "minIron",
									"value": "0",
									"description": "The minimum amount of iron in milligrams the recipe must have."
								},
								{
									"key": "maxIron",
									"value": "100",
									"description": "The maximum amount of iron in milligrams the recipe can have."
								},
								{
									"key": "minMagnesium",
									"value": "0",
									"description": "The minimum amount of magnesium in milligrams the recipe must have."
								},
								{
									"key": "maxMagnesium",
									"value": "100",
									"description": "The maximum amount of magnesium in milligrams the recipe can have."
								},
								{
									"key": "minManganese",
									"value": "0",
									"description": "The minimum amount of manganese in milligrams the recipe must have."
								},
								{
									"key": "maxManganese",
									"value": "100",
									"description": "The maximum amount of manganese in milligrams the recipe can have."
								},
								{
									"key": "minPhosphorus",
									"value": "0",
									"description": "The minimum amount of phosphorus in milligrams the recipe must have."
								},
								{
									"key": "maxPhosphorus",
									"value": "100",
									"description": "The maximum amount of phosphorus in milligrams the recipe can have."
								},
								{
									"key": "minPotassium",
									"value": "0",
									"description": "The minimum amount of potassium in milligrams the recipe must have."
								},
								{
									"key": "maxPotassium",
									"value": "100",
									"description": "The maximum amount of potassium in milligrams the recipe can have."
								},
								{
									"key": "minSelenium",
									"value": "0",
									"description": "The minimum amount of selenium in micrograms the recipe must have."
								},
								{
									"key": "maxSelenium",
									"value": "100",
									"description": "The maximum amount of selenium in micrograms the recipe can have."
								},
								{
									"key": "minSodium",
									"value": "0",
									"description": "The minimum amount of sodium in milligrams the recipe must have."
								},
								{
									"key": "maxSodium",
									"value": "100",
									"description": "The maximum amount of sodium in milligrams the recipe can have."
								},
								{
									"key": "minSugar",
									"value": "0",
									"description": "The minimum amount of sugar in grams the recipe must have."
								},
								{
									"key": "maxSugar",
									"value": "100",
									"description": "The maximum amount of sugar in grams the recipe can have."
								},
								{
									"key": "minZinc",
									"value": "0",
									"description": "The minimum amount of zinc in milligrams the recipe must have."
								},
								{
									"key": "maxZinc",
									"value": "100",
									"description": "The maximum amount of zinc in milligrams the recipe can have."
								},
								{
									"key": "offset",
									"value": "606",
									"description": "The number of results to skip (between 0 and 900)."
								},
								{
									"key": "number",
									"value": "10",
									"description": "The maximum number of items to return (between 1 and 100). Defaults to 10."
								},
								{
									"key": "limitLicense",
									"value": "true",
									"description": "Whether the recipes should have an open license that allows display with proper attribution."
								}
							]
						},
						"description": "Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint."
					},
					"response": []
				}
			]
		},
		{
			"name": "cuisine",
			"item": [
				{
					"name": "EmptyBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check default response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData.cuisine).to.eql(\"Mediterranean\");\r",
									"\r",
									"    pm.expect(jsonData.cuisines.length).to.eql(3);\r",
									"    pm.expect(jsonData.cuisines[0]).to.eql(\"Mediterranean\");\r",
									"    pm.expect(jsonData.cuisines[1]).to.eql(\"European\");\r",
									"    pm.expect(jsonData.cuisines[2]).to.eql(\"Italian\");\r",
									"\r",
									"    pm.expect(jsonData.confidence).to.eql(0.0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrlCuisine}}",
							"host": [
								"{{baseUrlCuisine}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unknown body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check default response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData.cuisine).to.eql(\"Mediterranean\");\r",
									"\r",
									"    pm.expect(jsonData.cuisines.length).to.eql(3);\r",
									"    pm.expect(jsonData.cuisines[0]).to.eql(\"Mediterranean\");\r",
									"    pm.expect(jsonData.cuisines[1]).to.eql(\"European\");\r",
									"    pm.expect(jsonData.cuisines[2]).to.eql(\"Italian\");\r",
									"\r",
									"    pm.expect(jsonData.confidence).to.eql(0.0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseUrlCuisine}}",
							"host": [
								"{{baseUrlCuisine}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unknown param",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.cuisine).to.eql(\"Indian\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "Slow Cooker Lamb Curry",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlCuisine}}?nonlang=foreign",
							"host": [
								"{{baseUrlCuisine}}"
							],
							"query": [
								{
									"key": "nonlang",
									"value": "foreign"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LanguageEn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.cuisine).to.eql(\"Indian\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"language\", \"en\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "Slow Cooker Lamb Curry",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlCuisine}}?language={{language}}",
							"host": [
								"{{baseUrlCuisine}}"
							],
							"query": [
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LanguageDe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.cuisine).to.eql(\"Indian\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"language\", \"de\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "Slow Cooker Lamb Curry",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlCuisine}}?language={{language}}",
							"host": [
								"{{baseUrlCuisine}}"
							],
							"query": [
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cuisine",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "0",
									"value": "t",
									"type": "text"
								},
								{
									"key": "1",
									"value": "i",
									"type": "text"
								},
								{
									"key": "2",
									"value": "t",
									"type": "text"
								},
								{
									"key": "3",
									"value": "l",
									"type": "text"
								},
								{
									"key": "4",
									"value": "e",
									"type": "text"
								},
								{
									"key": "5",
									"value": "=",
									"type": "text"
								},
								{
									"key": "6",
									"value": "S",
									"type": "text"
								},
								{
									"key": "7",
									"value": "l",
									"type": "text"
								},
								{
									"key": "8",
									"value": "o",
									"type": "text"
								},
								{
									"key": "9",
									"value": "w",
									"type": "text"
								},
								{
									"key": "10",
									"value": " ",
									"type": "text"
								},
								{
									"key": "11",
									"value": "C",
									"type": "text"
								},
								{
									"key": "12",
									"value": "o",
									"type": "text"
								},
								{
									"key": "13",
									"value": "o",
									"type": "text"
								},
								{
									"key": "14",
									"value": "k",
									"type": "text"
								},
								{
									"key": "15",
									"value": "e",
									"type": "text"
								},
								{
									"key": "16",
									"value": "r",
									"type": "text"
								},
								{
									"key": "17",
									"value": " ",
									"type": "text"
								},
								{
									"key": "18",
									"value": "L",
									"type": "text"
								},
								{
									"key": "19",
									"value": "a",
									"type": "text"
								},
								{
									"key": "20",
									"value": "m",
									"type": "text"
								},
								{
									"key": "21",
									"value": "b",
									"type": "text"
								},
								{
									"key": "22",
									"value": " ",
									"type": "text"
								},
								{
									"key": "23",
									"value": "C",
									"type": "text"
								},
								{
									"key": "24",
									"value": "u",
									"type": "text"
								},
								{
									"key": "25",
									"value": "r",
									"type": "text"
								},
								{
									"key": "26",
									"value": "r",
									"type": "text"
								},
								{
									"key": "27",
									"value": "y",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlCuisine}}",
							"host": [
								"{{baseUrlCuisine}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cuisines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check cuisines lenght\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.cuisines.length).to.eql(2);\r",
									"    pm.expect(jsonData.cuisines[0]).to.eql(\"Indian\");\r",
									"    pm.expect(jsonData.cuisines[1]).to.eql(\"Asian\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "Slow Cooker Lamb Curry",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlCuisine}}",
							"host": [
								"{{baseUrlCuisine}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confidence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check confidence\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.confidence).to.eql(0.85);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "Slow Cooker Lamb Curry",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlCuisine}}",
							"host": [
								"{{baseUrlCuisine}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ResponseTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "Slow Cooker Lamb Curry",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlCuisine}}",
							"host": [
								"{{baseUrlCuisine}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "StatusCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "Slow Cooker Lamb Curry",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlCuisine}}",
							"host": [
								"{{baseUrlCuisine}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check cuisines lenght\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.cuisines.length).to.eql(3);    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ingredientList",
									"value": "3 oz pork shoulder",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlCuisine}}",
							"host": [
								"{{baseUrlCuisine}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "apiKey",
				"type": "string"
			},
			{
				"key": "in",
				"value": "query",
				"type": "string"
			},
			{
				"key": "value",
				"value": "1beb8c4bb8c942bcb7d41c8d8f4b7d0b",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrlComplexSearch",
			"value": "https://api.spoonacular.com/recipes/complexSearch",
			"type": "string"
		},
		{
			"key": "baseUrlCuisine",
			"value": "https://api.spoonacular.com/recipes/cuisine",
			"type": "string"
		},
		{
			"key": "numberValue",
			"value": "1",
			"type": "string"
		},
		{
			"key": "offsetValue",
			"value": "0",
			"type": "string"
		},
		{
			"key": "proteinValue",
			"value": "20",
			"type": "string"
		},
		{
			"key": "caloriesValues",
			"value": "50",
			"type": "string"
		},
		{
			"key": "titleMatch",
			"value": "Crock"
		},
		{
			"key": "readyTime",
			"value": "20"
		},
		{
			"key": "fatValue",
			"value": "20",
			"type": "string"
		},
		{
			"key": "alcoholValue",
			"value": "10",
			"type": "string"
		},
		{
			"key": "caffeineValue",
			"value": "5",
			"type": "string"
		},
		{
			"key": "language",
			"value": "en"
		}
	]
}